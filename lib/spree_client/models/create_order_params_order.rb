=begin
#Platform API

#Spree Platform API

The version of the OpenAPI document: v2
Contact: we@sparksolutions.co
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module SpreeClient
  class CreateOrderParamsOrder
    attr_accessor :item_total

    attr_accessor :total

    attr_accessor :state

    attr_accessor :adjustment_total

    attr_accessor :user_id

    attr_accessor :completed_at

    attr_accessor :bill_address_id

    attr_accessor :ship_address_id

    attr_accessor :payment_total

    attr_accessor :shipment_state

    attr_accessor :payment_state

    attr_accessor :email

    attr_accessor :special_instructions

    attr_accessor :currency

    attr_accessor :last_ip_address

    attr_accessor :created_by_id

    attr_accessor :shipment_total

    attr_accessor :additional_tax_total

    attr_accessor :promo_total

    attr_accessor :channel

    attr_accessor :included_tax_total

    attr_accessor :item_count

    attr_accessor :approver_id

    attr_accessor :approved_at

    attr_accessor :confirmation_delivered

    attr_accessor :considered_risky

    attr_accessor :canceled_at

    attr_accessor :canceler_id

    attr_accessor :taxable_adjustment_total

    attr_accessor :non_taxable_adjustment_total

    attr_accessor :store_owner_notification_delivered

    attr_accessor :bill_address_attributes

    attr_accessor :ship_address_attributes

    attr_accessor :line_items_attributes

    attr_accessor :public_metadata

    attr_accessor :private_metadata

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'item_total' => :'item_total',
        :'total' => :'total',
        :'state' => :'state',
        :'adjustment_total' => :'adjustment_total',
        :'user_id' => :'user_id',
        :'completed_at' => :'completed_at',
        :'bill_address_id' => :'bill_address_id',
        :'ship_address_id' => :'ship_address_id',
        :'payment_total' => :'payment_total',
        :'shipment_state' => :'shipment_state',
        :'payment_state' => :'payment_state',
        :'email' => :'email',
        :'special_instructions' => :'special_instructions',
        :'currency' => :'currency',
        :'last_ip_address' => :'last_ip_address',
        :'created_by_id' => :'created_by_id',
        :'shipment_total' => :'shipment_total',
        :'additional_tax_total' => :'additional_tax_total',
        :'promo_total' => :'promo_total',
        :'channel' => :'channel',
        :'included_tax_total' => :'included_tax_total',
        :'item_count' => :'item_count',
        :'approver_id' => :'approver_id',
        :'approved_at' => :'approved_at',
        :'confirmation_delivered' => :'confirmation_delivered',
        :'considered_risky' => :'considered_risky',
        :'canceled_at' => :'canceled_at',
        :'canceler_id' => :'canceler_id',
        :'taxable_adjustment_total' => :'taxable_adjustment_total',
        :'non_taxable_adjustment_total' => :'non_taxable_adjustment_total',
        :'store_owner_notification_delivered' => :'store_owner_notification_delivered',
        :'bill_address_attributes' => :'bill_address_attributes',
        :'ship_address_attributes' => :'ship_address_attributes',
        :'line_items_attributes' => :'line_items_attributes',
        :'public_metadata' => :'public_metadata',
        :'private_metadata' => :'private_metadata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'item_total' => :'Float',
        :'total' => :'Float',
        :'state' => :'String',
        :'adjustment_total' => :'Float',
        :'user_id' => :'String',
        :'completed_at' => :'String',
        :'bill_address_id' => :'String',
        :'ship_address_id' => :'String',
        :'payment_total' => :'Float',
        :'shipment_state' => :'String',
        :'payment_state' => :'String',
        :'email' => :'String',
        :'special_instructions' => :'String',
        :'currency' => :'String',
        :'last_ip_address' => :'String',
        :'created_by_id' => :'String',
        :'shipment_total' => :'Float',
        :'additional_tax_total' => :'Float',
        :'promo_total' => :'Float',
        :'channel' => :'String',
        :'included_tax_total' => :'Float',
        :'item_count' => :'Integer',
        :'approver_id' => :'String',
        :'approved_at' => :'String',
        :'confirmation_delivered' => :'Boolean',
        :'considered_risky' => :'Boolean',
        :'canceled_at' => :'String',
        :'canceler_id' => :'String',
        :'taxable_adjustment_total' => :'Float',
        :'non_taxable_adjustment_total' => :'Float',
        :'store_owner_notification_delivered' => :'Boolean',
        :'bill_address_attributes' => :'UpdateAddressParams',
        :'ship_address_attributes' => :'UpdateAddressParams',
        :'line_items_attributes' => :'Array<UpdateLineItemParams>',
        :'public_metadata' => :'Object',
        :'private_metadata' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SpreeClient::CreateOrderParamsOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SpreeClient::CreateOrderParamsOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'item_total')
        self.item_total = attributes[:'item_total']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'adjustment_total')
        self.adjustment_total = attributes[:'adjustment_total']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'bill_address_id')
        self.bill_address_id = attributes[:'bill_address_id']
      end

      if attributes.key?(:'ship_address_id')
        self.ship_address_id = attributes[:'ship_address_id']
      end

      if attributes.key?(:'payment_total')
        self.payment_total = attributes[:'payment_total']
      end

      if attributes.key?(:'shipment_state')
        self.shipment_state = attributes[:'shipment_state']
      end

      if attributes.key?(:'payment_state')
        self.payment_state = attributes[:'payment_state']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'special_instructions')
        self.special_instructions = attributes[:'special_instructions']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'last_ip_address')
        self.last_ip_address = attributes[:'last_ip_address']
      end

      if attributes.key?(:'created_by_id')
        self.created_by_id = attributes[:'created_by_id']
      end

      if attributes.key?(:'shipment_total')
        self.shipment_total = attributes[:'shipment_total']
      end

      if attributes.key?(:'additional_tax_total')
        self.additional_tax_total = attributes[:'additional_tax_total']
      end

      if attributes.key?(:'promo_total')
        self.promo_total = attributes[:'promo_total']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'included_tax_total')
        self.included_tax_total = attributes[:'included_tax_total']
      end

      if attributes.key?(:'item_count')
        self.item_count = attributes[:'item_count']
      end

      if attributes.key?(:'approver_id')
        self.approver_id = attributes[:'approver_id']
      end

      if attributes.key?(:'approved_at')
        self.approved_at = attributes[:'approved_at']
      end

      if attributes.key?(:'confirmation_delivered')
        self.confirmation_delivered = attributes[:'confirmation_delivered']
      else
        self.confirmation_delivered = false
      end

      if attributes.key?(:'considered_risky')
        self.considered_risky = attributes[:'considered_risky']
      else
        self.considered_risky = false
      end

      if attributes.key?(:'canceled_at')
        self.canceled_at = attributes[:'canceled_at']
      end

      if attributes.key?(:'canceler_id')
        self.canceler_id = attributes[:'canceler_id']
      end

      if attributes.key?(:'taxable_adjustment_total')
        self.taxable_adjustment_total = attributes[:'taxable_adjustment_total']
      end

      if attributes.key?(:'non_taxable_adjustment_total')
        self.non_taxable_adjustment_total = attributes[:'non_taxable_adjustment_total']
      end

      if attributes.key?(:'store_owner_notification_delivered')
        self.store_owner_notification_delivered = attributes[:'store_owner_notification_delivered']
      else
        self.store_owner_notification_delivered = false
      end

      if attributes.key?(:'bill_address_attributes')
        self.bill_address_attributes = attributes[:'bill_address_attributes']
      end

      if attributes.key?(:'ship_address_attributes')
        self.ship_address_attributes = attributes[:'ship_address_attributes']
      end

      if attributes.key?(:'line_items_attributes')
        if (value = attributes[:'line_items_attributes']).is_a?(Array)
          self.line_items_attributes = value
        end
      end

      if attributes.key?(:'public_metadata')
        self.public_metadata = attributes[:'public_metadata']
      end

      if attributes.key?(:'private_metadata')
        self.private_metadata = attributes[:'private_metadata']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ["cart", "address", "delivery", "payment", "confirm", "complete", "canceled"])
      return false unless state_validator.valid?(@state)
      shipment_state_validator = EnumAttributeValidator.new('String', ["backorder", "canceled", "partial", "pending", "ready", "shipped"])
      return false unless shipment_state_validator.valid?(@shipment_state)
      payment_state_validator = EnumAttributeValidator.new('String', ["balance_due", "credit_owed", "failed", "paid", "void"])
      return false unless payment_state_validator.valid?(@payment_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["cart", "address", "delivery", "payment", "confirm", "complete", "canceled"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipment_state Object to be assigned
    def shipment_state=(shipment_state)
      validator = EnumAttributeValidator.new('String', ["backorder", "canceled", "partial", "pending", "ready", "shipped"])
      unless validator.valid?(shipment_state)
        fail ArgumentError, "invalid value for \"shipment_state\", must be one of #{validator.allowable_values}."
      end
      @shipment_state = shipment_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_state Object to be assigned
    def payment_state=(payment_state)
      validator = EnumAttributeValidator.new('String', ["balance_due", "credit_owed", "failed", "paid", "void"])
      unless validator.valid?(payment_state)
        fail ArgumentError, "invalid value for \"payment_state\", must be one of #{validator.allowable_values}."
      end
      @payment_state = payment_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          item_total == o.item_total &&
          total == o.total &&
          state == o.state &&
          adjustment_total == o.adjustment_total &&
          user_id == o.user_id &&
          completed_at == o.completed_at &&
          bill_address_id == o.bill_address_id &&
          ship_address_id == o.ship_address_id &&
          payment_total == o.payment_total &&
          shipment_state == o.shipment_state &&
          payment_state == o.payment_state &&
          email == o.email &&
          special_instructions == o.special_instructions &&
          currency == o.currency &&
          last_ip_address == o.last_ip_address &&
          created_by_id == o.created_by_id &&
          shipment_total == o.shipment_total &&
          additional_tax_total == o.additional_tax_total &&
          promo_total == o.promo_total &&
          channel == o.channel &&
          included_tax_total == o.included_tax_total &&
          item_count == o.item_count &&
          approver_id == o.approver_id &&
          approved_at == o.approved_at &&
          confirmation_delivered == o.confirmation_delivered &&
          considered_risky == o.considered_risky &&
          canceled_at == o.canceled_at &&
          canceler_id == o.canceler_id &&
          taxable_adjustment_total == o.taxable_adjustment_total &&
          non_taxable_adjustment_total == o.non_taxable_adjustment_total &&
          store_owner_notification_delivered == o.store_owner_notification_delivered &&
          bill_address_attributes == o.bill_address_attributes &&
          ship_address_attributes == o.ship_address_attributes &&
          line_items_attributes == o.line_items_attributes &&
          public_metadata == o.public_metadata &&
          private_metadata == o.private_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [item_total, total, state, adjustment_total, user_id, completed_at, bill_address_id, ship_address_id, payment_total, shipment_state, payment_state, email, special_instructions, currency, last_ip_address, created_by_id, shipment_total, additional_tax_total, promo_total, channel, included_tax_total, item_count, approver_id, approved_at, confirmation_delivered, considered_risky, canceled_at, canceler_id, taxable_adjustment_total, non_taxable_adjustment_total, store_owner_notification_delivered, bill_address_attributes, ship_address_attributes, line_items_attributes, public_metadata, private_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SpreeClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
