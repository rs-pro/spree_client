=begin
#Platform API

#Spree Platform API

The version of the OpenAPI document: v2
Contact: we@sparksolutions.co
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module SpreeClient
  class UpdateSideBySideImagesCmsSectionParamsCmsSection
    # Update this section name.
    attr_accessor :name

    # Change the section type.
    attr_accessor :type

    # Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)
    attr_accessor :position

    # Update the resource type that image one links to.
    attr_accessor :link_type_one

    # Update the resource type that image two links to.
    attr_accessor :link_type_two

    # Update the slug or path that image two links to.
    attr_accessor :link_one

    # Update the slug or path that image two links to.
    attr_accessor :link_two

    # Update the title used in image one.
    attr_accessor :title_one

    # Update the title used in image two.
    attr_accessor :title_two

    # This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container.
    attr_accessor :fit

    # Update the subtitle used in image one.
    attr_accessor :subtitle_one

    # Update the subtitle used in image two.
    attr_accessor :subtitle_two

    # This value is used by front end developers for styling the section padding.
    attr_accessor :gutters

    # Use a `multipart/form-data` request to upload assets.
    attr_accessor :cms_section_image_one

    # Use a `multipart/form-data` request to upload assets.
    attr_accessor :cms_section_image_two

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'type' => :'type',
        :'position' => :'position',
        :'link_type_one' => :'link_type_one',
        :'link_type_two' => :'link_type_two',
        :'link_one' => :'link_one',
        :'link_two' => :'link_two',
        :'title_one' => :'title_one',
        :'title_two' => :'title_two',
        :'fit' => :'fit',
        :'subtitle_one' => :'subtitle_one',
        :'subtitle_two' => :'subtitle_two',
        :'gutters' => :'gutters',
        :'cms_section_image_one' => :'cms_section[image_one]',
        :'cms_section_image_two' => :'cms_section[image_two]'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'type' => :'String',
        :'position' => :'Integer',
        :'link_type_one' => :'String',
        :'link_type_two' => :'String',
        :'link_one' => :'String',
        :'link_two' => :'String',
        :'title_one' => :'String',
        :'title_two' => :'String',
        :'fit' => :'String',
        :'subtitle_one' => :'String',
        :'subtitle_two' => :'String',
        :'gutters' => :'String',
        :'cms_section_image_one' => :'File',
        :'cms_section_image_two' => :'File'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'link_one',
        :'link_two',
        :'title_one',
        :'title_two',
        :'subtitle_one',
        :'subtitle_two',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SpreeClient::UpdateSideBySideImagesCmsSectionParamsCmsSection` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SpreeClient::UpdateSideBySideImagesCmsSectionParamsCmsSection`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'link_type_one')
        self.link_type_one = attributes[:'link_type_one']
      end

      if attributes.key?(:'link_type_two')
        self.link_type_two = attributes[:'link_type_two']
      end

      if attributes.key?(:'link_one')
        self.link_one = attributes[:'link_one']
      end

      if attributes.key?(:'link_two')
        self.link_two = attributes[:'link_two']
      end

      if attributes.key?(:'title_one')
        self.title_one = attributes[:'title_one']
      end

      if attributes.key?(:'title_two')
        self.title_two = attributes[:'title_two']
      end

      if attributes.key?(:'fit')
        self.fit = attributes[:'fit']
      end

      if attributes.key?(:'subtitle_one')
        self.subtitle_one = attributes[:'subtitle_one']
      end

      if attributes.key?(:'subtitle_two')
        self.subtitle_two = attributes[:'subtitle_two']
      end

      if attributes.key?(:'gutters')
        self.gutters = attributes[:'gutters']
      end

      if attributes.key?(:'cms_section_image_one')
        self.cms_section_image_one = attributes[:'cms_section_image_one']
      end

      if attributes.key?(:'cms_section_image_two')
        self.cms_section_image_two = attributes[:'cms_section_image_two']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["Spree::Cms::Sections::HeroImage", "Spree::Cms::Sections::FeaturedArticle", "Spree::Cms::Sections::ProductCarousel", "Spree::Cms::Sections::ImageGallery", "Spree::Cms::Sections::SideBySideImages", "Spree::Cms::Sections::RichTextContent"])
      return false unless type_validator.valid?(@type)
      link_type_one_validator = EnumAttributeValidator.new('String', ["Spree::Taxon", "Spree::Product"])
      return false unless link_type_one_validator.valid?(@link_type_one)
      link_type_two_validator = EnumAttributeValidator.new('String', ["Spree::Taxon", "Spree::Product"])
      return false unless link_type_two_validator.valid?(@link_type_two)
      fit_validator = EnumAttributeValidator.new('String', ["Screen", "Container"])
      return false unless fit_validator.valid?(@fit)
      gutters_validator = EnumAttributeValidator.new('String', ["Gutters", "No Gutters"])
      return false unless gutters_validator.valid?(@gutters)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["Spree::Cms::Sections::HeroImage", "Spree::Cms::Sections::FeaturedArticle", "Spree::Cms::Sections::ProductCarousel", "Spree::Cms::Sections::ImageGallery", "Spree::Cms::Sections::SideBySideImages", "Spree::Cms::Sections::RichTextContent"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_type_one Object to be assigned
    def link_type_one=(link_type_one)
      validator = EnumAttributeValidator.new('String', ["Spree::Taxon", "Spree::Product"])
      unless validator.valid?(link_type_one)
        fail ArgumentError, "invalid value for \"link_type_one\", must be one of #{validator.allowable_values}."
      end
      @link_type_one = link_type_one
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_type_two Object to be assigned
    def link_type_two=(link_type_two)
      validator = EnumAttributeValidator.new('String', ["Spree::Taxon", "Spree::Product"])
      unless validator.valid?(link_type_two)
        fail ArgumentError, "invalid value for \"link_type_two\", must be one of #{validator.allowable_values}."
      end
      @link_type_two = link_type_two
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fit Object to be assigned
    def fit=(fit)
      validator = EnumAttributeValidator.new('String', ["Screen", "Container"])
      unless validator.valid?(fit)
        fail ArgumentError, "invalid value for \"fit\", must be one of #{validator.allowable_values}."
      end
      @fit = fit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gutters Object to be assigned
    def gutters=(gutters)
      validator = EnumAttributeValidator.new('String', ["Gutters", "No Gutters"])
      unless validator.valid?(gutters)
        fail ArgumentError, "invalid value for \"gutters\", must be one of #{validator.allowable_values}."
      end
      @gutters = gutters
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          type == o.type &&
          position == o.position &&
          link_type_one == o.link_type_one &&
          link_type_two == o.link_type_two &&
          link_one == o.link_one &&
          link_two == o.link_two &&
          title_one == o.title_one &&
          title_two == o.title_two &&
          fit == o.fit &&
          subtitle_one == o.subtitle_one &&
          subtitle_two == o.subtitle_two &&
          gutters == o.gutters &&
          cms_section_image_one == o.cms_section_image_one &&
          cms_section_image_two == o.cms_section_image_two
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, type, position, link_type_one, link_type_two, link_one, link_two, title_one, title_two, fit, subtitle_one, subtitle_two, gutters, cms_section_image_one, cms_section_image_two].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SpreeClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
